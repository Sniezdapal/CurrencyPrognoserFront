@page "/calculator"
@using Models
@using System.Text
@using Newtonsoft.Json
@inject HttpClient client
<h1>Calculator</h1>
<h6>Choose date to predict currency rate changes:</h6>
<RadzenDatePicker @bind-Value=@timeTo DateFormat="d" Style="margin-bottom: 20px;"></RadzenDatePicker>
@if (CheckDate())
{
    <h6>Now tell us what currency to track:</h6>
    <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true"
    Data=currencyList @bind-Value=currencyValues Style="margin-bottom: 20px; display: block;" />
    <RadzenButton Text="Get Data!" Click="@(args => Plot())" Style="margin-bottom: 20px;" />
    @if (data.Count != 0)
    {
        <h2>Currency rates for @string.Join(", ", currencyValues)</h2>
        <span>I want it to be smooth!</span>
        <Chart Data=data></Chart>
    }
}
else
{
    <h3>You have to choose next days only.</h3>
}

@code {
    DateTime timeFrom = DateTime.Now.Date.AddDays(-30);
    DateTime timeTo = DateTime.Now.Date.AddDays(10);
    bool isSmooth = false;
    IEnumerable<string> currencyValues = new string[] { "USD" };
    IEnumerable<string> currencyList = new string[] { "USD", "EUR" };
    List<DataSet> data = new List<DataSet>();

    bool CheckDate()
    {
        return true;
    }
    void Plot()
    {
        GetData();
    }

    async void GetData()
    {
        data.Clear();
        var json = new Request() {
            begin = timeFrom.ToTimestamp().ToString(), end = timeTo.ToTimestamp().ToString(), currency_names = currencyValues.ToArray()
            }.ToJson();
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("http://localhost:5000/get_currency", content);
        var tt = await response.Content.ReadAsStringAsync();
        Console.WriteLine(tt);
        var d = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, double>>>(tt);
        foreach(var key in d.Keys)
        {
            var dataSet = new DataSet() {CurrencyName = key, Items = new List<DataItem>()};
            foreach(var kkey in d[key].Keys)
            {
                var date = kkey.FromTimestamp();
                dataSet.Items.Add(new DataItem() {Date = date, CurrencyRate = d[key][kkey]});
                Console.WriteLine(d[key][kkey]);
            }
            data.Add(dataSet);
        }

        StateHasChanged();
    }
}