@page "/stock-calculators"
@inject ConfigurationProvider _conf
@inject IDataProvider Data
<RadzenSteps>
    <Steps>
        <RadzenStepsItem Text="Pick date">
            <h3>Select date</h3>
            <h6>Select last date to predict</h6>
            <RadzenDatePicker @bind-Value=timeTo DateFormat="d" Style="margin: 20px;" />
            @if ((timeTo - timeFrom).TotalDays < 1)
                    {
            <h6>Selected date must be tomorrow or later!</h6>
            }
        </RadzenStepsItem>
        <RadzenStepsItem Text="Pick stocks" Disabled="@((timeTo - timeFrom).TotalDays < 1)">
            <h3>Select stocks</h3>
            <h6>Select stocks for prediction</h6>
            <RadzenListBox AllowFiltering=true FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive Multiple=true
                Data=_availableStocks @bind-Value=_selectedStocks />
        </RadzenStepsItem>
        <RadzenStepsItem Text="Pick prediction model" Disabled="@(_selectedStocks.Count() == 0)">
            <h3>Select prediction model</h3>
            <h6>Select model to predict stocks: @string.Join(", ", _selectedStocks)</h6>
            <RadzenRadioButtonList @bind-Value=_selectedModel TValue="string">
                <Items>
                    @foreach (var model in _availableModels)
                    {
                        <RadzenRadioButtonListItem Text=@model Value=@model TValue="string"/>
                    }
                </Items>
            </RadzenRadioButtonList>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Predict" Disabled="@(_selectedModel == null)">
            <RadzenButton Text="Predict!" Click=LoadData/>
            @if(_showLoading)
            {
                <RadzenProgressBar Value=100 ShowValue=false Mode=ProgressBarMode.Indeterminate Style="margin: 20px"/>
            }
            else if(_data != null)
            {
                <ColumnChart Data=_data/>
            }
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code
{
    DateTime timeFrom = DateTime.Now.Date;
    DateTime timeTo = DateTime.Now.Date.AddDays(1);
    IEnumerable<string> _selectedStocks = new string[] { };
    IEnumerable<string> _availableStocks;
    IEnumerable<string> _availableModels;
    string _selectedModel;
    DataSet _data;
    bool _showLoading = false;
    protected override async Task OnInitializedAsync()
    {
        await _conf.InitAsync();
        _availableStocks = _conf.GetStocks();
        _availableModels = _conf.GetModels();
    }

    private async Task LoadData()
    {
        _showLoading = true;
        _data = await Data.GetStockData(timeFrom, timeTo, _selectedStocks, _selectedModel);
        _showLoading = false;
    }
}