@page "/stock-calculator"
@using Models
@inject IDataProvider randData
<h1>Stock calculator</h1>
<h6>Choose date to predict stock changes:</h6>
<RadzenDatePicker @bind-Value=@timeTo DateFormat="d" Style="margin-bottom: 20px;"></RadzenDatePicker>
@if (CheckDate())
{
    <h6>Now tell us what stock to track:</h6>
    <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Multiple="true"
    Data=currencyList @bind-Value=currencyValues Style="margin-bottom: 20px; display: block;" />
    <RadzenButton Text="Get Data!" Click="@(args => Plot())" Style="margin-bottom: 20px;" />
    @if (isDataLoaded)
    {
        <h2>Currency rates for @string.Join(", ", currencyValues)</h2>
        <span>I want it to be smooth!</span>
        <ColumnChart Data=data></ColumnChart>
    }
    else
    {
        if(data != null)
        {
            <h2>Loading...</h2>
        }
    }
}
else
{
    <h3>You have to choose next days only.</h3>
}

@code {
    DateTime timeFrom = DateTime.Now.Date.AddDays(-5);
    DateTime timeTo = DateTime.Now.Date.AddDays(10);
    bool isDataLoaded = false;
    IEnumerable<string> currencyValues = new string[] { "USD" };
    IEnumerable<string> currencyList = new string[] { "USD", "EUR" };
    List<DataSet> data;

    bool CheckDate()
    {
        return true;
    }
    void Plot()
    {
        GetData();
    }

    async void GetData()
    {
        isDataLoaded = false;
        data = new List<DataSet>();
        data.Clear();
        data = await randData.GetData(timeFrom, timeTo, currencyValues);

        isDataLoaded = true;
        StateHasChanged();
    }
}