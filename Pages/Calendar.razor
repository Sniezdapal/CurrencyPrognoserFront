@page "/calendar"
@inject ICurrencyProvider _currencies
@inject IDataProvider Data
<RadzenSteps>
    <Steps>
        <RadzenStepsItem Text="Pick dates">
            <h3>Select date from</h3>
            <h6>Select the first date</h6>
            <RadzenDatePicker @bind-Value=timeFrom DateFormat="d" Style="margin: 20px;" />
            @if ((timeTo - timeFrom).TotalDays < 1)
                    {
            <h6>Selected date must be tomorrow or later!</h6>
            }
            <h3>Select date to</h3>
            <h6>Select the second date</h6>
            <RadzenDatePicker @bind-Value=timeTo DateFormat="d" Style="margin: 20px;" />
            @if (DateTime.Now.Date < timeTo)
                    {
            <h6>Selected date must be in the past!</h6>
            }
        </RadzenStepsItem>
        <RadzenStepsItem Text="Pick currencies"
            Disabled="@((timeTo - timeFrom).TotalDays < 1 && DateTime.Now.Date < timeTo)">
            <h3>Select currencies</h3>
            <h6>Selected currencies for prediction</h6>
            <RadzenListBox AllowFiltering=true FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive Multiple=true
                Data=_availableCurrencies @bind-Value=_selectedCurrencies />
        </RadzenStepsItem>
        <RadzenStepsItem Text="Load data" Disabled="@(_selectedCurrencies.Count() == 0)">
            <p>Show data for: @string.Join(", ", _selectedCurrencies)</p>
            <RadzenButton Text="Load!" Click=LoadData />
            @if (_showLoading)
                    {
            <RadzenProgressBar Value=100 ShowValue=false Mode=ProgressBarMode.Indeterminate Style="margin: 20px" />
            }
                    else if (_data != null)
                    {
            <Chart Data=_data />
            }
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code
{
    DateTime timeFrom = DateTime.Now.Date.AddDays(-10);
    DateTime timeTo = DateTime.Now.Date.AddDays(-1);
    IEnumerable<string> _selectedCurrencies = new string[] { };
    IEnumerable<string> _availableCurrencies;
    DataSet _data;
    bool _showLoading = false;
    protected override async Task OnInitializedAsync()
    {
        _availableCurrencies = await _currencies.GetCurrencies();
    }

    private async Task LoadData()
    {
        _showLoading = true;
        _data = await Data.GetData(timeFrom, timeTo, _selectedCurrencies, "regressive");
        _showLoading = false;
    }
}